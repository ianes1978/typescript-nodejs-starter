!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t){e.exports=require("express")},function(e,t){e.exports=require("config")},function(e,t){e.exports=require("winston")},function(e,t,n){const o=n(1),r=process.env.PORT||3e3,s=n(4);n(5);const i=n(6),a=n(0),c=a();c.use(a.json()),c.use(a.urlencoded({extended:!0})),o.enableAccessLogs&&c.use(i("tiny")),c.use(s()),c.use(a.static("public")),n(7)(c),c.listen(r,()=>{console.log(`listening on port ${r}...`)})},function(e,t){e.exports=require("helmet")},function(e,t){e.exports=require("express-async-errors")},function(e,t){e.exports=require("morgan")},function(e,t,n){const o=n(8),r=n(18),{errorMidLogger:s}=n(21);e.exports=function(e){e.use("/api/users",o),e.use("/",r),e.use(s)}},function(e,t,n){const o=n(0).Router(),{logger:r}=n(9),{ADMIN:s,BASE:i}=n(10),a=n(11),c=n(12),{validateCreateUser:l,validateEditUser:u}=n(15),d=n(17);o.get("/",a([s,i]),async(e,t)=>{r.info("You get all users!");let n=await c.getUsers();t.send(n)}),o.get("/:id",a([s,i]),async(e,t)=>{let n=await c.getUser(e.params.id);if(!n)throw new d("The user not found.",404);t.send(n)}),o.post("/",a([s]),async(e,t)=>{const{error:n}=l(e.body);if(n)throw new d(n.details[0].message,400);let o=await c.createUser(e.body);t.send(o)}),o.put("/:id",a([s]),async(e,t)=>{const{error:n}=u(e.body);if(n)throw new d(n.details[0].message,400);if(e.body._id!=e.params.id)throw new d("The body _id does not match with URL ID",400);let o=await c.getUser(e.params.id);if(!o)throw new d("The user not found.",404);o=await c.updateUser(e.params.id,e.body),o.ok&&(o=await c.getUser(e.params.id)),t.send(o)}),o.delete("/:id",a([s]),async(e,t)=>{let n=await c.getUser(e.params.id);if(!n)throw new d("The user not found.",404);n=await c.deleteUser(e.params.id),t.send(n)}),e.exports=o},function(e,t,n){const{createLogger:o,transports:r,format:s}=n(2),i=[new r.File({level:"info",filename:"logs/winston/errors.log",maxsize:3e7,tailable:!0,maxFiles:3}),new r.Console({format:s.simple()})],a=[new r.File({level:"info",filename:"logs/winston/info.log",maxsize:3e7,tailable:!0,maxFiles:3}),new r.Console({format:s.simple()})],c=o({format:s.combine(s.printf(e=>e.message)),transports:i}),l=o({format:s.combine(s.printf(e=>e.message)),transports:a});e.exports={logger:{info(e){l.info(e+" | "+(new Date).toISOString())},error(e){c.error(e.message,{date:(new Date).toLocaleString(),statusCode:e.statusCode||"500",url:req.url||"",stack:e.stack})}}}},function(e,t){e.exports={ADMIN:"ADMIN",BASE:"BASE"}},function(e,t){e.exports=function(e){return function(t,n,o){console.log("Authenticating...",e),o()}}},function(e,t,n){const o=n(13);e.exports=new class{constructor(){}async getUsers(){return await o.User.find().limit(10)}async getUser(e){return await o.User.findOne({_id:e})}async createUser(e){e.creationDate=Date.now();let t=new o.User(e);return await t.save()}async updateUser(e,t){return t.modificationDate=Date.now(),await o.User.updateOne({_id:e},t)}async deleteUser(e){return await o.User.deleteOne({_id:e})}}},function(e,t,n){const o=n(14),r=n(1).mongodbConnectionString||"mongodb://localhost/";console.log(r);db=o.connection,db.on("connecting",(function(){console.log("connecting to MongoDB...")})),db.on("error",(function(e){console.log("Error in MongoDb connection: "+e)})),db.on("connected",(function(){console.log("MongoDB connected!")})),db.once("open",(function(){console.log("MongoDB connection opened!")})),db.on("reconnected",(function(){console.log("MongoDB reconnected!")})),db.on("disconnected",(function(){console.log("MongoDB disconnected!")})),o.connect(r+"AuthProvider",{reconnectTries:Number.MAX_VALUE,reconnectInterval:5e3,useNewUrlParser:!0});const s=new o.Schema({firstName:String,lastName:String,email:String,isActive:Boolean,modificationDate:{type:Date,default:null},creationDate:{type:Date}}),i=o.model("User",s,"users");e.exports={User:i}},function(e,t){e.exports=require("mongoose")},function(e,t,n){const o=n(16);t.validateCreateUser=function(e){const t={firstName:o.string().min(3).required(),lastName:o.string().min(3).required(),email:o.string().email({minDomainAtoms:2}).required(),isActive:o.bool()};return o.validate(e,t)},t.validateEditUser=function(e){const t={_id:o.string().length(24).required(),firstName:o.string().min(3).required(),lastName:o.string().min(3).required(),email:o.string().email({minDomainAtoms:2}).required(),isActive:o.bool()};return o.validate(e,t)}},function(e,t){e.exports=require("joi")},function(e,t){e.exports=class extends Error{constructor(e,t){super(e),this.statusCode=t||500}}},function(e,t,n){const o=n(0);var r=n(19);const s=o.Router();var i=n(20);s.get("/",(e,t)=>{var n=r.readFileSync("./views/home.html","utf8"),o=i.to_html(n,{pagePosTitle:"titolo posizionamento",pageTitle:"titolo pagina",pageDescription:"titolo desrizione",link:{url:"https://www.google.it/",label:"link a google",target:"_blank"}});t.send(o)}),e.exports=s},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("mustache")},function(e,t,n){const{createLogger:o,transports:r,format:s}=n(2),i=[new r.File({level:"error",filename:"logs/winston/mid-errors.log",maxsize:3e7,tailable:!0,maxFiles:3})],a=o({format:s.combine(s.timestamp({format:"YYYY-MM-DDTHH:mm:ss:ms"}),s.printf(e=>JSON.stringify(e)+",")),transports:i});e.exports={errorMidLogger(e,t,n,o){a.error(e.message,{date:(new Date).toLocaleString(),statusCode:e.statusCode||"500",url:t.url||"",stack:e.stack}),n.status(e.statusCode||500).send(e.message||e),o()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZXhwcmVzc1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcImNvbmZpZ1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcIndpbnN0b25cIiIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmVyLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImhlbG1ldFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImV4cHJlc3MtYXN5bmMtZXJyb3JzXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibW9yZ2FuXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JvdXRlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcm91dGVzL3VzZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2xvZ2dlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9yb2xlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWlkZGxld2FyZS9hdXRoUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL3VzZXJzU2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvZGJDb250ZXh0LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcIm1vbmdvb3NlXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL3ZhbGlkYXRvcnMuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiam9pXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL21vZGVscy9jb21tb24tbW9kZWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9yb3V0ZXMvaG9tZS5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJmc1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcIm11c3RhY2hlXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL21pZGRsZXdhcmUvbWlkRXJyb3JzLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwicmVxdWlyZSIsImNvbmZpZyIsInBvcnQiLCJwcm9jZXNzIiwiZW52IiwiUE9SVCIsImhlbG1ldCIsIm1vcmdhbiIsImV4cHJlc3MiLCJhcHAiLCJ1c2UiLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwiZW5hYmxlQWNjZXNzTG9ncyIsInN0YXRpYyIsImxpc3RlbiIsImNvbnNvbGUiLCJsb2ciLCJ1c2Vyc1JvdXRlIiwiaG9tZVJvdXRlIiwiZXJyb3JNaWRMb2dnZXIiLCJyb3V0ZXIiLCJSb3V0ZXIiLCJsb2dnZXIiLCJBRE1JTiIsIkJBU0UiLCJhdXRoUHJvdmlkZXIiLCJ1c2Vyc1NlcnZpY2UiLCJ2YWxpZGF0ZUNyZWF0ZVVzZXIiLCJ2YWxpZGF0ZUVkaXRVc2VyIiwiSHR0cEVycm9yIiwiYXN5bmMiLCJyZXEiLCJyZXMiLCJpbmZvIiwicmVzdWx0IiwiZ2V0VXNlcnMiLCJzZW5kIiwiZ2V0VXNlciIsInBhcmFtcyIsImlkIiwicG9zdCIsImVycm9yIiwiYm9keSIsImRldGFpbHMiLCJtZXNzYWdlIiwiY3JlYXRlVXNlciIsInB1dCIsIl9pZCIsInVwZGF0ZVVzZXIiLCJvayIsImRlbGV0ZSIsImRlbGV0ZVVzZXIiLCJjcmVhdGVMb2dnZXIiLCJ0cmFuc3BvcnRzIiwiZm9ybWF0IiwidHJhbnNwb3J0RXJyb3IiLCJGaWxlIiwibGV2ZWwiLCJmaWxlbmFtZSIsIm1heHNpemUiLCJ0YWlsYWJsZSIsIm1heEZpbGVzIiwiQ29uc29sZSIsInNpbXBsZSIsInRyYW5zcG9ydEluZm8iLCJsb2dnZXJFcnJvciIsImNvbWJpbmUiLCJwcmludGYiLCJlcnIiLCJsb2dnZXJJbmZvIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiZGF0ZSIsInRvTG9jYWxlU3RyaW5nIiwic3RhdHVzQ29kZSIsInVybCIsInN0YWNrIiwidmFsaWRSb2xlcyIsIm5leHQiLCJkYkNvbnRleHQiLCJVc2VyIiwiZmluZCIsImxpbWl0IiwiZmluZE9uZSIsInVzZXIiLCJjcmVhdGlvbkRhdGUiLCJub3ciLCJfdXNlciIsInNhdmUiLCJtb2RpZmljYXRpb25EYXRlIiwidXBkYXRlT25lIiwiZGVsZXRlT25lIiwibW9uZ29vc2UiLCJjb25uZWN0aW9uU3RyaW5nIiwibW9uZ29kYkNvbm5lY3Rpb25TdHJpbmciLCJkYiIsImNvbm5lY3Rpb24iLCJvbiIsIm9uY2UiLCJjb25uZWN0IiwicmVjb25uZWN0VHJpZXMiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJyZWNvbm5lY3RJbnRlcnZhbCIsInVzZU5ld1VybFBhcnNlciIsInVzZXJTY2hlbWEiLCJTY2hlbWEiLCJmaXJzdE5hbWUiLCJTdHJpbmciLCJsYXN0TmFtZSIsImVtYWlsIiwiaXNBY3RpdmUiLCJCb29sZWFuIiwidHlwZSIsImRlZmF1bHQiLCJtb2RlbCIsIkpvaSIsInVzZXJWYWxpZGF0b3IiLCJzdHJpbmciLCJtaW4iLCJyZXF1aXJlZCIsIm1pbkRvbWFpbkF0b21zIiwiYm9vbCIsInZhbGlkYXRlIiwibGVuZ3RoIiwiRXJyb3IiLCJzdXBlciIsInRoaXMiLCJmcyIsIm11c3RhY2hlIiwicGFnZSIsInJlYWRGaWxlU3luYyIsImh0bWwiLCJ0b19odG1sIiwicGFnZVBvc1RpdGxlIiwicGFnZVRpdGxlIiwicGFnZURlc2NyaXB0aW9uIiwibGluayIsImxhYmVsIiwidGFyZ2V0IiwidHJhbnNwb3J0RXJyb3JzIiwidGltZXN0YW1wIiwiSlNPTiIsInN0cmluZ2lmeSIs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Y2IsRUFBYSxDQUM3QkUsT0FBUUEsRUFBT1ksUUFDWFosRUFBT3VGLFVBQVUsQ0FBRXZGLE9BQVEsMkJBQzNCQSxFQUFPYSxPQUFPQyxHQUFtQjBFLEtBQUtDLFVBQVUzRSxHQUFsQixNQUVsQ2YsV0FBWXVGLElBRWhCL0ssRUFBT0QsUUFBVSxDQUNiLGVBQWV3RyxFQUFLckMsRUFBS0MsRUFBSzhDLEdBQzFCYixFQUFZeEIsTUFBTTJCLEVBQUl4QixRQUFTLENBQzNCNEIsTUFBTSxJQUFJRixNQUFPRyxpQkFDakJDLFdBQVlOLEVBQUlNLFlBQWMsTUFDOUJDLElBQUs1QyxFQUFJNEMsS0FBTyxHQUNoQkMsTUFBT1IsRUFBSVEsUUFFZjVDLEVBQUlnSCxPQUFPNUUsRUFBSU0sWUFBYyxLQUFLdEMsS0FBS2dDLEVBQUl4QixTQUFXd0IsR0FDdERVIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDMpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb25maWdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwid2luc3RvblwiKTsiLCJjb25zdCBjb25maWcgPSByZXF1aXJlKFwiY29uZmlnXCIpO1xyXG5jb25zdCBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCAzMDAwO1xyXG5cclxuY29uc3QgaGVsbWV0ID0gcmVxdWlyZShcImhlbG1ldFwiKTtcclxucmVxdWlyZShcImV4cHJlc3MtYXN5bmMtZXJyb3JzXCIpO1xyXG5jb25zdCBtb3JnYW4gPSByZXF1aXJlKFwibW9yZ2FuXCIpO1xyXG5jb25zdCBleHByZXNzID0gcmVxdWlyZShcImV4cHJlc3NcIik7XHJcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcclxuXHJcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpO1xyXG5hcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcclxuXHJcbmlmKGNvbmZpZy5lbmFibGVBY2Nlc3NMb2dzKSB7XHJcbiAgYXBwLnVzZShtb3JnYW4oXCJ0aW55XCIpKTtcclxufVxyXG5hcHAudXNlKGhlbG1ldCgpKTtcclxuYXBwLnVzZShleHByZXNzLnN0YXRpYyhcInB1YmxpY1wiKSk7XHJcblxyXG5yZXF1aXJlKFwiLi9yb3V0ZXMvaW5kZXhcIikoYXBwKTtcclxuXHJcbmFwcC5saXN0ZW4ocG9ydCwgKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKGBsaXN0ZW5pbmcgb24gcG9ydCAke3BvcnR9Li4uYCk7XHJcbn0pO1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJoZWxtZXRcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZXhwcmVzcy1hc3luYy1lcnJvcnNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibW9yZ2FuXCIpOyIsImNvbnN0IHVzZXJzUm91dGUgPSByZXF1aXJlKFwiLi4vcm91dGVzL3VzZXJzXCIpO1xyXG5jb25zdCBob21lUm91dGUgPSByZXF1aXJlKFwiLi4vcm91dGVzL2hvbWVcIik7XHJcbmNvbnN0IHsgZXJyb3JNaWRMb2dnZXIgfSA9IHJlcXVpcmUoJy4uL21pZGRsZXdhcmUvbWlkRXJyb3JzJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcHApIHtcclxuICAgIGFwcC51c2UoXCIvYXBpL3VzZXJzXCIsIHVzZXJzUm91dGUpO1xyXG4gICAgYXBwLnVzZShcIi9cIiwgaG9tZVJvdXRlKTtcclxuXHJcbiAgICBhcHAudXNlKGVycm9yTWlkTG9nZ2VyKTtcclxufSIsImNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTtcclxuY29uc3Qgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcclxuY29uc3QgeyBsb2dnZXIgfSA9IHJlcXVpcmUoJy4uL2NvcmUvbG9nZ2VyJyk7XHJcbmNvbnN0IHsgQURNSU4sIEJBU0UgfSA9IHJlcXVpcmUoJy4uL2NvcmUvcm9sZXMnKTtcclxuY29uc3QgYXV0aFByb3ZpZGVyID0gcmVxdWlyZShcIi4uL21pZGRsZXdhcmUvYXV0aFByb3ZpZGVyXCIpO1xyXG5jb25zdCB1c2Vyc1NlcnZpY2UgPSByZXF1aXJlKFwiLi4vc2VydmljZXMvdXNlcnNTZXJ2aWNlXCIpO1xyXG5jb25zdCB7IHZhbGlkYXRlQ3JlYXRlVXNlciwgdmFsaWRhdGVFZGl0VXNlciB9ID0gcmVxdWlyZShcIi4uL3N0b3JlL3ZhbGlkYXRvcnNcIik7XHJcbmNvbnN0IEh0dHBFcnJvciA9IHJlcXVpcmUoXCIuLi9zdG9yZS9tb2RlbHMvY29tbW9uLW1vZGVsc1wiKTtcclxuXHJcbnJvdXRlci5nZXQoXCIvXCIsIGF1dGhQcm92aWRlcihbQURNSU4sIEJBU0VdKSwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgbG9nZ2VyLmluZm8oXCJZb3UgZ2V0IGFsbCB1c2VycyFcIik7XHJcbiAgbGV0IHJlc3VsdCA9IGF3YWl0IHVzZXJzU2VydmljZS5nZXRVc2VycygpO1xyXG4gIHJlcy5zZW5kKHJlc3VsdCk7XHJcbn0pO1xyXG5yb3V0ZXIuZ2V0KFwiLzppZFwiLCBhdXRoUHJvdmlkZXIoW0FETUlOLCBCQVNFXSksIGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gIGxldCByZXN1bHQgPSBhd2FpdCB1c2Vyc1NlcnZpY2UuZ2V0VXNlcihyZXEucGFyYW1zLmlkKTtcclxuICBpZighcmVzdWx0KVxyXG4gICAgdGhyb3cgbmV3IEh0dHBFcnJvcihcIlRoZSB1c2VyIG5vdCBmb3VuZC5cIiwgNDA0KTtcclxuICAgIFxyXG4gIHJlcy5zZW5kKHJlc3VsdCk7XHJcbn0pO1xyXG5yb3V0ZXIucG9zdChcIi9cIiwgYXV0aFByb3ZpZGVyKFtBRE1JTl0pLCBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICBjb25zdCB7IGVycm9yIH0gPSB2YWxpZGF0ZUNyZWF0ZVVzZXIocmVxLmJvZHkpO1xyXG4gIGlmIChlcnJvcikgXHJcbiAgICB0aHJvdyBuZXcgSHR0cEVycm9yKGVycm9yLmRldGFpbHNbMF0ubWVzc2FnZSwgNDAwKTtcclxuICBcclxuICBsZXQgcmVzdWx0ID0gYXdhaXQgdXNlcnNTZXJ2aWNlLmNyZWF0ZVVzZXIocmVxLmJvZHkpO1xyXG4gIHJlcy5zZW5kKHJlc3VsdCk7XHJcbn0pO1xyXG5yb3V0ZXIucHV0KFwiLzppZFwiLCBhdXRoUHJvdmlkZXIoW0FETUlOXSksIGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gIGNvbnN0IHsgZXJyb3IgfSA9IHZhbGlkYXRlRWRpdFVzZXIocmVxLmJvZHkpO1xyXG4gIGlmIChlcnJvcilcclxuICAgIHRocm93IG5ldyBIdHRwRXJyb3IoZXJyb3IuZGV0YWlsc1swXS5tZXNzYWdlLCA0MDApO1xyXG4gIFxyXG4gIGlmIChyZXEuYm9keS5faWQgIT0gcmVxLnBhcmFtcy5pZClcclxuICAgIHRocm93IG5ldyBIdHRwRXJyb3IoXCJUaGUgYm9keSBfaWQgZG9lcyBub3QgbWF0Y2ggd2l0aCBVUkwgSURcIiwgNDAwKTtcclxuICBcclxuICBsZXQgcmVzdWx0ID0gYXdhaXQgdXNlcnNTZXJ2aWNlLmdldFVzZXIocmVxLnBhcmFtcy5pZCk7XHJcbiAgaWYgKCFyZXN1bHQpXHJcbiAgICB0aHJvdyBuZXcgSHR0cEVycm9yKFwiVGhlIHVzZXIgbm90IGZvdW5kLlwiLCA0MDQpO1xyXG5cclxuICByZXN1bHQgPSBhd2FpdCB1c2Vyc1NlcnZpY2UudXBkYXRlVXNlcihyZXEucGFyYW1zLmlkLCByZXEuYm9keSk7XHJcbiAgaWYocmVzdWx0Lm9rKVxyXG4gICAgcmVzdWx0ID0gYXdhaXQgdXNlcnNTZXJ2aWNlLmdldFVzZXIocmVxLnBhcmFtcy5pZCk7XHJcbiAgcmVzLnNlbmQocmVzdWx0KTtcclxufSk7XHJcbnJvdXRlci5kZWxldGUoXCIvOmlkXCIsIGF1dGhQcm92aWRlcihbQURNSU5dKSwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgbGV0IHJlc3VsdCA9IGF3YWl0IHVzZXJzU2VydmljZS5nZXRVc2VyKHJlcS5wYXJhbXMuaWQpO1xyXG4gIGlmICghcmVzdWx0KVxyXG4gICAgdGhyb3cgbmV3IEh0dHBFcnJvcihcIlRoZSB1c2VyIG5vdCBmb3VuZC5cIiwgNDA0KTtcclxuXHJcbiAgcmVzdWx0ID0gYXdhaXQgdXNlcnNTZXJ2aWNlLmRlbGV0ZVVzZXIocmVxLnBhcmFtcy5pZCk7XHJcbiAgcmVzLnNlbmQocmVzdWx0KTtcclxufSk7XHJcbm1vZHVsZS5leHBvcnRzID0gcm91dGVyO1xyXG4iLCJjb25zdCB7IGNyZWF0ZUxvZ2dlciwgdHJhbnNwb3J0cywgZm9ybWF0IH0gPSByZXF1aXJlKCd3aW5zdG9uJyk7XHJcblxyXG5jb25zdCB0cmFuc3BvcnRFcnJvciA9IFtcclxuICAgIG5ldyB0cmFuc3BvcnRzLkZpbGUoe1xyXG4gICAgICAgIGxldmVsOiAnaW5mbycsXHJcbiAgICAgICAgZmlsZW5hbWU6ICdsb2dzL3dpbnN0b24vZXJyb3JzLmxvZycsXHJcbiAgICAgICAgbWF4c2l6ZTogMzAwMDAwMDAsIC8vIDMwTUJcclxuICAgICAgICB0YWlsYWJsZTogdHJ1ZSxcclxuICAgICAgICBtYXhGaWxlczozXHJcbiAgICB9KSxcclxuICAgIG5ldyB0cmFuc3BvcnRzLkNvbnNvbGUoe1xyXG4gICAgICAgIGZvcm1hdDogZm9ybWF0LnNpbXBsZSgpXHJcbiAgICB9KVxyXG5dO1xyXG5jb25zdCB0cmFuc3BvcnRJbmZvID0gW1xyXG4gICAgbmV3IHRyYW5zcG9ydHMuRmlsZSh7XHJcbiAgICAgICAgbGV2ZWw6ICdpbmZvJyxcclxuICAgICAgICBmaWxlbmFtZTogJ2xvZ3Mvd2luc3Rvbi9pbmZvLmxvZycsXHJcbiAgICAgICAgbWF4c2l6ZTogMzAwMDAwMDAsIC8vIDMwTUJcclxuICAgICAgICB0YWlsYWJsZTogdHJ1ZSxcclxuICAgICAgICBtYXhGaWxlczozXHJcbiAgICB9KSxcclxuICAgIG5ldyB0cmFuc3BvcnRzLkNvbnNvbGUoe1xyXG4gICAgICAgIGZvcm1hdDogZm9ybWF0LnNpbXBsZSgpXHJcbiAgICB9KVxyXG5dO1xyXG5jb25zdCBsb2dnZXJFcnJvciA9IGNyZWF0ZUxvZ2dlcih7XHJcbiAgICBmb3JtYXQ6IGZvcm1hdC5jb21iaW5lKFxyXG4gICAgICAgIGZvcm1hdC5wcmludGYoZXJyID0+IGVyci5tZXNzYWdlKVxyXG4gICAgKSxcclxuICAgIHRyYW5zcG9ydHM6IHRyYW5zcG9ydEVycm9yXHJcbn0pO1xyXG5jb25zdCBsb2dnZXJJbmZvID0gY3JlYXRlTG9nZ2VyKHtcclxuICAgIGZvcm1hdDogZm9ybWF0LmNvbWJpbmUoXHJcbiAgICAgICAgZm9ybWF0LnByaW50ZihpbmZvID0+IGluZm8ubWVzc2FnZSlcclxuICAgICksXHJcbiAgICB0cmFuc3BvcnRzOiB0cmFuc3BvcnRJbmZvXHJcbn0pO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGxvZ2dlcjoge1xyXG4gICAgICAgIGluZm8obWVzc2FnZSkge1xyXG4gICAgICAgICAgICBsb2dnZXJJbmZvLmluZm8obWVzc2FnZSArIFwiIHwgXCIgKyBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXJyb3IoZXJyKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlckVycm9yLmVycm9yKGVyci5tZXNzYWdlLCB7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKCksXHJcbiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOiBlcnIuc3RhdHVzQ29kZSB8fCBcIjUwMFwiLFxyXG4gICAgICAgICAgICAgICAgdXJsOiByZXEudXJsIHx8IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzdGFjazogZXJyLnN0YWNrXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImNvbnN0IHJvbGVzID0ge1xyXG4gICAgQURNSU46IFwiQURNSU5cIixcclxuICAgIEJBU0U6IFwiQkFTRVwiXHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSByb2xlczsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGF1dGhQcm92aWRlcih2YWxpZFJvbGVzKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gYXV0aChyZXEsIHJlcywgbmV4dCl7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0F1dGhlbnRpY2F0aW5nLi4uJywgdmFsaWRSb2xlcyk7XHJcbiAgICAgICAgbmV4dCgpO1xyXG4gICAgfVxyXG59OyIsIlxyXG5jb25zdCBkYkNvbnRleHQgPSByZXF1aXJlKFwiLi4vc3RvcmUvZGJDb250ZXh0XCIpO1xyXG5cclxuY2xhc3MgVXNlcnNTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG4gIGFzeW5jIGdldFVzZXJzICgpIHtcclxuICAgIHJldHVybiBhd2FpdCBkYkNvbnRleHQuVXNlci5maW5kKClcclxuICAgICAgLy8gLmZpbmQoeyBwcmljZTogeyAkZ3RlOiAxMCB9IH0pXHJcbiAgICAgIC8vIC5maW5kKHsgcHJpY2U6IHsgJGluOiBbMTAsIDE1LCAyMF0gfSB9KVxyXG4gICAgICAvLyAub3IoWyB7IHByaWNlOiB7ICRpbjogWzEwLCAxNSwgMjBdIH0gfSwgeyBwcmljZTogbnVsbCB9IF0pXHJcbiAgICAgIC8vIC5hbmQoWyB7IHByaWNlOiB7ICRpbjogWzEwLCAxNSwgMjBdIH0gfSwgeyBwcmljZTogbnVsbCB9IF0pXHJcbiAgICAgIC8vIC5maW5kKClcclxuICAgICAgLy8gLnNvcnQoeyBuYW1lOiAxIH0pXHJcbiAgICAgIC8vLnNlbGVjdCh7IG5hbWU6IDEsIHRhZ3M6IDEgfSlcclxuICAgICAgLmxpbWl0KDEwKTtcclxuICB9O1xyXG4gIGFzeW5jIGdldFVzZXIgKGlkKSB7XHJcbiAgICByZXR1cm4gYXdhaXQgZGJDb250ZXh0LlVzZXIuZmluZE9uZSh7IF9pZDogaWQgfSk7XHJcbiAgfTtcclxuICBhc3luYyBjcmVhdGVVc2VyICh1c2VyKSB7XHJcbiAgICB1c2VyLmNyZWF0aW9uRGF0ZSA9IERhdGUubm93KCk7XHJcbiAgICBsZXQgX3VzZXIgPSBuZXcgZGJDb250ZXh0LlVzZXIodXNlcik7XHJcbiAgICByZXR1cm4gYXdhaXQgX3VzZXIuc2F2ZSgpO1xyXG4gIH07XHJcbiAgYXN5bmMgdXBkYXRlVXNlciAoaWQsIHVzZXIpIHtcclxuICAgIHVzZXIubW9kaWZpY2F0aW9uRGF0ZSA9IERhdGUubm93KCk7XHJcbiAgICByZXR1cm4gYXdhaXQgZGJDb250ZXh0LlVzZXIudXBkYXRlT25lKHsgX2lkOiBpZCB9LCB1c2VyKTtcclxuICB9O1xyXG4gIGFzeW5jIGRlbGV0ZVVzZXIgKGlkKSB7XHJcbiAgICByZXR1cm4gYXdhaXQgZGJDb250ZXh0LlVzZXIuZGVsZXRlT25lKHsgX2lkOiBpZCB9KTtcclxuICB9O1xyXG59XHJcbm1vZHVsZS5leHBvcnRzID0gbmV3IFVzZXJzU2VydmljZSgpO1xyXG4iLCJjb25zdCBtb25nb29zZSA9IHJlcXVpcmUoXCJtb25nb29zZVwiKTtcclxuY29uc3QgY29uZmlnID0gcmVxdWlyZShcImNvbmZpZ1wiKTtcclxuXHJcbmNvbnN0IGNvbm5lY3Rpb25TdHJpbmcgPSBjb25maWcubW9uZ29kYkNvbm5lY3Rpb25TdHJpbmcgfHwgXCJtb25nb2RiOi8vbG9jYWxob3N0L1wiO1xyXG5jb25zb2xlLmxvZyhjb25uZWN0aW9uU3RyaW5nKTtcclxuY29uc3QgZGJOYW1lID0gJ0F1dGhQcm92aWRlcic7XHJcblxyXG4vLyBtb25nb29zZS5jb25uZWN0aW9uLnJlYWR5U3RhdGU6XHJcbi8vIDA6IGRpc2Nvbm5lY3RlZFxyXG4vLyAxOiBjb25uZWN0ZWRcclxuLy8gMjogY29ubmVjdGluZ1xyXG4vLyAzOiBkaXNjb25uZWN0aW5nXHJcbmRiID0gbW9uZ29vc2UuY29ubmVjdGlvbjtcclxuZGIub24oJ2Nvbm5lY3RpbmcnLCBmdW5jdGlvbigpIHtcclxuICBjb25zb2xlLmxvZygnY29ubmVjdGluZyB0byBNb25nb0RCLi4uJyk7XHJcbn0pO1xyXG5kYi5vbignZXJyb3InLCBmdW5jdGlvbihlcnJvcikge1xyXG4gIGNvbnNvbGUubG9nKCdFcnJvciBpbiBNb25nb0RiIGNvbm5lY3Rpb246ICcgKyBlcnJvcik7XHJcbn0pO1xyXG5kYi5vbignY29ubmVjdGVkJywgZnVuY3Rpb24oKSB7XHJcbiAgY29uc29sZS5sb2coJ01vbmdvREIgY29ubmVjdGVkIScpO1xyXG59KTtcclxuZGIub25jZSgnb3BlbicsIGZ1bmN0aW9uKCkge1xyXG4gIGNvbnNvbGUubG9nKCdNb25nb0RCIGNvbm5lY3Rpb24gb3BlbmVkIScpO1xyXG59KTtcclxuZGIub24oJ3JlY29ubmVjdGVkJywgZnVuY3Rpb24gKCkge1xyXG4gIGNvbnNvbGUubG9nKCdNb25nb0RCIHJlY29ubmVjdGVkIScpO1xyXG59KTtcclxuZGIub24oJ2Rpc2Nvbm5lY3RlZCcsIGZ1bmN0aW9uKCkge1xyXG4gIGNvbnNvbGUubG9nKCdNb25nb0RCIGRpc2Nvbm5lY3RlZCEnKTtcclxufSk7XHJcblxyXG5tb25nb29zZS5jb25uZWN0KGNvbm5lY3Rpb25TdHJpbmcgKyBkYk5hbWUsIHtcclxuICByZWNvbm5lY3RUcmllczogTnVtYmVyLk1BWF9WQUxVRSwgLy8gTmV2ZXIgc3RvcCB0cnlpbmcgdG8gcmVjb25uZWN0XHJcbiAgcmVjb25uZWN0SW50ZXJ2YWw6IDUwMDAsIC8vIFJlY29ubmVjdCBldmVyeSA1MDAwbXNcclxuICB1c2VOZXdVcmxQYXJzZXI6IHRydWVcclxufSk7XHJcblxyXG4vLyBzY2hlbWFzXHJcbmNvbnN0IHVzZXJTY2hlbWEgPSBuZXcgbW9uZ29vc2UuU2NoZW1hKHtcclxuICBmaXJzdE5hbWU6IFN0cmluZyxcclxuICBsYXN0TmFtZTogU3RyaW5nLFxyXG4gIGVtYWlsOiBTdHJpbmcsXHJcbiAgaXNBY3RpdmU6IEJvb2xlYW4sXHJcbiAgbW9kaWZpY2F0aW9uRGF0ZTogeyB0eXBlOiBEYXRlLCBkZWZhdWx0OiBudWxsIH0sXHJcbiAgY3JlYXRpb25EYXRlOiB7IHR5cGU6IERhdGUgfVxyXG59KTtcclxuY29uc3QgVXNlciA9IG1vbmdvb3NlLm1vZGVsKFwiVXNlclwiLCB1c2VyU2NoZW1hLCBcInVzZXJzXCIpOyBcclxuLy8gbW9kZWxcclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgVXNlclxyXG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm1vbmdvb3NlXCIpOyIsImNvbnN0IEpvaSA9IHJlcXVpcmUoXCJqb2lcIik7XHJcblxyXG5leHBvcnRzLnZhbGlkYXRlQ3JlYXRlVXNlciA9IGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICBjb25zdCB1c2VyVmFsaWRhdG9yID0ge1xyXG4gICAgICAgIGZpcnN0TmFtZTogSm9pLnN0cmluZygpLm1pbigzKS5yZXF1aXJlZCgpLFxyXG4gICAgICAgIGxhc3ROYW1lOiBKb2kuc3RyaW5nKCkubWluKDMpLnJlcXVpcmVkKCksXHJcbiAgICAgICAgZW1haWw6IEpvaS5zdHJpbmcoKS5lbWFpbCh7IG1pbkRvbWFpbkF0b21zOiAyIH0pLnJlcXVpcmVkKCksXHJcbiAgICAgICAgaXNBY3RpdmU6IEpvaS5ib29sKClcclxuICAgIH07XHJcbiAgICByZXR1cm4gSm9pLnZhbGlkYXRlKHVzZXIsIHVzZXJWYWxpZGF0b3IpO1xyXG59XHJcbmV4cG9ydHMudmFsaWRhdGVFZGl0VXNlciA9IGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICBjb25zdCB1c2VyVmFsaWRhdG9yID0ge1xyXG4gICAgICAgIF9pZDogSm9pLnN0cmluZygpLmxlbmd0aCgyNCkucmVxdWlyZWQoKSxcclxuICAgICAgICBmaXJzdE5hbWU6IEpvaS5zdHJpbmcoKS5taW4oMykucmVxdWlyZWQoKSxcclxuICAgICAgICBsYXN0TmFtZTogSm9pLnN0cmluZygpLm1pbigzKS5yZXF1aXJlZCgpLFxyXG4gICAgICAgIGVtYWlsOiBKb2kuc3RyaW5nKCkuZW1haWwoeyBtaW5Eb21haW5BdG9tczogMiB9KS5yZXF1aXJlZCgpLFxyXG4gICAgICAgIGlzQWN0aXZlOiBKb2kuYm9vbCgpXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEpvaS52YWxpZGF0ZSh1c2VyLCB1c2VyVmFsaWRhdG9yKTtcclxufSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImpvaVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEh0dHBFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YXR1c0NvZGUpIHtcclxuICAgICAgICBzdXBlcihtZXNzYWdlKTtcclxuICAgICAgICB0aGlzLnN0YXR1c0NvZGU9IHN0YXR1c0NvZGUgfHwgNTAwO1xyXG4gICAgfVxyXG59IiwiY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcclxudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcclxuY29uc3Qgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcclxudmFyIG11c3RhY2hlID0gcmVxdWlyZSgnbXVzdGFjaGUnKTtcclxuXHJcbnJvdXRlci5nZXQoJy8nLCAocmVxLCByZXMpID0+IHtcclxuICAgIGNvbnN0IHZpZXdNb2RlbCA9IHtcclxuICAgICAgICBwYWdlUG9zVGl0bGU6ICd0aXRvbG8gcG9zaXppb25hbWVudG8nLFxyXG4gICAgICAgIHBhZ2VUaXRsZTogJ3RpdG9sbyBwYWdpbmEnLFxyXG4gICAgICAgIHBhZ2VEZXNjcmlwdGlvbjogJ3RpdG9sbyBkZXNyaXppb25lJyxcclxuICAgICAgICBsaW5rOiB7XHJcbiAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vd3d3Lmdvb2dsZS5pdC8nLFxyXG4gICAgICAgICAgICBsYWJlbDogJ2xpbmsgYSBnb29nbGUnLFxyXG4gICAgICAgICAgICB0YXJnZXQ6ICdfYmxhbmsnXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdmFyIHBhZ2UgPSBmcy5yZWFkRmlsZVN5bmMoJy4vdmlld3MvaG9tZS5odG1sJywgXCJ1dGY4XCIpO1xyXG4gICAgdmFyIGh0bWwgPSBtdXN0YWNoZS50b19odG1sKHBhZ2UsIHZpZXdNb2RlbCk7XHJcblxyXG4gICAgcmVzLnNlbmQoaHRtbCk7XHJcbn0pO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlcjtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibXVzdGFjaGVcIik7IiwiY29uc3QgeyBjcmVhdGVMb2dnZXIsIHRyYW5zcG9ydHMsIGZvcm1hdCB9ID0gcmVxdWlyZSgnd2luc3RvbicpO1xyXG5cclxuY29uc3QgdHJhbnNwb3J0RXJyb3JzID0gW1xyXG4gICAgbmV3IHRyYW5zcG9ydHMuRmlsZSh7XHJcbiAgICAgICAgbGV2ZWw6ICdlcnJvcicsXHJcbiAgICAgICAgZmlsZW5hbWU6ICdsb2dzL3dpbnN0b24vbWlkLWVycm9ycy5sb2cnLFxyXG4gICAgICAgIG1heHNpemU6IDMwMDAwMDAwLCAvLyAzME1CXHJcbiAgICAgICAgdGFpbGFibGU6IHRydWUsXHJcbiAgICAgICAgbWF4RmlsZXM6M1xyXG4gICAgfSlcclxuXTtcclxuY29uc3QgbG9nZ2VyRXJyb3IgPSBjcmVhdGVMb2dnZXIoe1xyXG4gICAgZm9ybWF0OiBmb3JtYXQuY29tYmluZShcclxuICAgICAgICBmb3JtYXQudGltZXN0YW1wKHsgZm9ybWF0OiAnWVlZWS1NTS1ERFRISDptbTpzczptcycgfSksXHJcbiAgICAgICAgZm9ybWF0LnByaW50ZihlcnIgPT4geyByZXR1cm4gYCR7SlNPTi5zdHJpbmdpZnkoZXJyKX0sYDsgfSlcclxuICAgICksXHJcbiAgICB0cmFuc3BvcnRzOiB0cmFuc3BvcnRFcnJvcnNcclxufSk7XHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgZXJyb3JNaWRMb2dnZXIoZXJyLCByZXEsIHJlcywgbmV4dCkge1xyXG4gICAgICAgIGxvZ2dlckVycm9yLmVycm9yKGVyci5tZXNzYWdlLCB7XHJcbiAgICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKCkudG9Mb2NhbGVTdHJpbmcoKSxcclxuICAgICAgICAgICAgc3RhdHVzQ29kZTogZXJyLnN0YXR1c0NvZGUgfHwgXCI1MDBcIixcclxuICAgICAgICAgICAgdXJsOiByZXEudXJsIHx8IFwiXCIsXHJcbiAgICAgICAgICAgIHN0YWNrOiBlcnIuc3RhY2tcclxuICAgICAgICB9KTsgICAgXHJcbiAgICAgICAgcmVzLnN0YXR1cyhlcnIuc3RhdHVzQ29kZSB8fCA1MDApLnNlbmQoZXJyLm1lc3NhZ2UgfHwgZXJyKTtcclxuICAgICAgICBuZXh0KCk7XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9