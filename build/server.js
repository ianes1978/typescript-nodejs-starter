!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=2)}([function(e,n){e.exports=require("express")},function(e,n){e.exports=require("config")},function(e,n,t){"use strict";n.__esModule=!0;var o=t(3),r=t(0),i=t(4),s=t(17),c=t(18),a=o.default.port||3e3,u=r();u.use(r.json()),u.use(r.urlencoded({extended:!0})),o.default.enableAccessLogs&&u.use(s("tiny")),u.use(c()),u.use(r.static("public")),i.default(u),u.listen(a,(function(){console.log("server started at http://localhost:"+a)}))},function(e,n,t){"use strict";n.__esModule=!0;var o=t(1),r={name:o.get("name"),mongodbConnectionString:o.get("mongodbConnectionString"),enableAccessLogs:o.get("enableAccessLogs"),port:o.get("port")};n.default=r},function(e,n,t){"use strict";n.__esModule=!0;var o=t(5),r=t(14);n.default=function(e){e.use("/api/users",o.router),e.use("/",r)}},function(e,n,t){"use strict";var o=this&&this.__awaiter||function(e,n,t,o){return new(t||(t=Promise))((function(r,i){function s(e){try{a(o.next(e))}catch(e){i(e)}}function c(e){try{a(o.throw(e))}catch(e){i(e)}}function a(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,c)}a((o=o.apply(e,n||[])).next())}))},r=this&&this.__generator||function(e,n){var t,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;s;)try{if(t=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(r=s.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=n.call(e,s)}catch(e){i=[6,e],o=0}finally{t=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}};n.__esModule=!0,n.router=void 0;var i=t(0).Router();n.router=i;var s=t(6).logger,c=t(8),a=c.ADMIN,u=c.BASE,l=t(9),f=t(10),d=t(13);i.get("/",l([a,u]),(function(e,n){return o(void 0,void 0,void 0,(function(){var e;return r(this,(function(t){switch(t.label){case 0:return s.info("You get all users!"),[4,f.getUsers()];case 1:return e=t.sent(),n.send(e),[2]}}))}))})),i.get("/:id",l([a,u]),(function(e,n){return o(void 0,void 0,void 0,(function(){var t;return r(this,(function(o){switch(o.label){case 0:return[4,f.getUser(e.params.id)];case 1:if(!(t=o.sent()))throw new d("The user not found.",404);return n.send(t),[2]}}))}))}))},function(e,n,t){const{createLogger:o,transports:r,format:i}=t(7),s=[new r.File({level:"info",filename:"logs/winston/errors.log",maxsize:3e7,tailable:!0,maxFiles:3}),new r.Console({format:i.simple()})],c=[new r.File({level:"info",filename:"logs/winston/info.log",maxsize:3e7,tailable:!0,maxFiles:3}),new r.Console({format:i.simple()})],a=o({format:i.combine(i.printf(e=>e.message)),transports:s}),u=o({format:i.combine(i.printf(e=>e.message)),transports:c});e.exports={logger:{info(e){u.info(e+" | "+(new Date).toISOString())},error(e){a.error(e.message,{date:(new Date).toLocaleString(),statusCode:e.statusCode||"500",url:req.url||"",stack:e.stack})}}}},function(e,n){e.exports=require("winston")},function(e,n){e.exports={ADMIN:"ADMIN",BASE:"BASE"}},function(e,n){e.exports=function(e){return function(n,t,o){console.log("Authenticating...",e),o()}}},function(e,n,t){const o=t(11);e.exports=new class{constructor(){}async getUsers(){return await o.User.find().limit(10)}async getUser(e){return await o.User.findOne({_id:e})}async createUser(e){e.creationDate=Date.now();let n=new o.User(e);return await n.save()}async updateUser(e,n){return n.modificationDate=Date.now(),await o.User.updateOne({_id:e},n)}async deleteUser(e){return await o.User.deleteOne({_id:e})}}},function(e,n,t){const o=t(12),r=t(1).mongodbConnectionString||"mongodb://localhost/";console.log(r);db=o.connection,db.on("connecting",(function(){console.log("connecting to MongoDB...")})),db.on("error",(function(e){console.log("Error in MongoDb connection: "+e)})),db.on("connected",(function(){console.log("MongoDB connected!")})),db.once("open",(function(){console.log("MongoDB connection opened!")})),db.on("reconnected",(function(){console.log("MongoDB reconnected!")})),db.on("disconnected",(function(){console.log("MongoDB disconnected!")})),o.connect(r+"AuthProvider",{reconnectTries:Number.MAX_VALUE,reconnectInterval:5e3,useNewUrlParser:!0});const i=new o.Schema({firstName:String,lastName:String,email:String,isActive:Boolean,modificationDate:{type:Date,default:null},creationDate:{type:Date}}),s=o.model("User",i,"users");e.exports={User:s}},function(e,n){e.exports=require("mongoose")},function(e,n){e.exports=class extends Error{constructor(e,n){super(e),this.statusCode=n||500}}},function(e,n,t){const o=t(0);var r=t(15);const i=o.Router();var s=t(16);i.get("/",(e,n)=>{var t=r.readFileSync("./build/views/home.html","utf8"),o=s.to_html(t,{pagePosTitle:"titolo posizionamento",pageTitle:"titolo pagina",pageDescription:"titolo desrizione",link:{url:"https://www.google.it/",label:"link a google",target:"_blank"}});n.send(o)}),e.exports=i},function(e,n){e.exports=require("fs")},function(e,n){e.exports=require("mustache")},function(e,n){e.exports=require("morgan")},function(e,n){e.exports=require("helmet")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,